schema {
  query: QueryRoot
  mutation: MutationRoot
  subscription: SubscriptionRoot
}

enum Badge {
  ADMIN
  MODERATOR
}

type ById {
  channel(id: ID!): Channel
  guild(id: ID!): Guild
  message(id: ID!): Message
  user(id: ID!): User
}

enum Capability {
  DELETE
  EDIT
}

union Channel = TextChannel

input ChannelInit {
  kind: ChannelKind!
  name: String!
}

enum ChannelKind {
  TEXT
}

type Conversation {
  author: User!
  getAllMessages: [Message!]!
  id: String!
  messages(after: String, before: String, first: Int, last: Int): MessageConnection!
  recipient: MessageRecipient!
}

type Guild {
  channels: [Channel!]!
  createChannel(init: ChannelInit!): Channel!
  id: ID!
  joinConstraint: JoinConstraint!
  members(after: String, before: String, first: Int, last: Int): MemberConnection!
  name: String!
  roles: [Role!]!
}

input GuildInit {
  name: String!
}

enum JoinConstraint {
  JUST_REGISTERED
  NONE
  PHONE
  VERIFIED_EMAIL
}

type ManageMessage {
  capabilities: [Capability!]!
  delete: Message!
}

type Member {
  nickname: String
  roles: [Role!]!
  user: User!
}

type MemberConnection {
  """A list of edges."""
  edges: [MemberEdge!]!

  """A list of nodes."""
  nodes: [Member!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type MemberEdge {
  """A cursor for use in pagination"""
  cursor: String!

  """The item at the end of the edge"""
  node: Member!
}

type Message {
  author: User!
  canDelete: Boolean!
  content: String!
  createdAt: String!
  id: ID!
  recipient: MessageRecipient!
  reference: Message
}

type MessageConnection {
  """A list of edges."""
  edges: [MessageEdge!]!

  """A list of nodes."""
  nodes: [Message!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type MessageEdge {
  """A cursor for use in pagination"""
  cursor: String!

  """The item at the end of the edge"""
  node: Message!
}

input MessageInit {
  content: String!
  recipient: MessageRecipientIn!
  reference: ID
}

type MessageRecipient {
  asChannel: TextableChannel
  asUser: User
  kind: MessageRecipientKind!
}

input MessageRecipientIn {
  id: ID!
  type: MessageRecipientInKind!
}

enum MessageRecipientInKind {
  CHANNEL
  USER
}

enum MessageRecipientKind {
  CHANNEL
  USER
}

type MutationRoot {
  addFriend(other: String!): User
  createGuild(guild: GuildInit!): Guild!
  manageMessage(message: ID!): ManageMessage
  sendMessage(message: MessageInit!): Message!
  setAvatar(avatar: Upload!): User!
  setStatus(status: Status!): User!
  setTheme(theme: Theme!): User!
}

"""Information about pagination in a connection"""
type PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

"""The possible permissions of a user or role in a guild."""
enum Permission {
  ADMINISTRATOR

  """A user with this permission may ban another user from the guild."""
  BAN

  """A user with this permission may create invitation links to the guild."""
  INVITE

  """A user with this permission may remove another user from the guild."""
  KICK
  MANAGE_CHANNELS
  MANAGE_EMOJIS
  MANAGE_MESSAGES
  MANAGE_ROLES
  MANAGE_SERVER
  MANAGE_WEBHOOKS
  SEND_MESSAGES

  """
  A user with this permission may time another user out from the guild.
  Read [Timeout](super::audit::Timeout) docs for more info on what a time out is.
  """
  TIMEOUT
}

type QueryRoot {
  byId: ById!
  conversationDirect(recipient: ID!): Conversation!
  conversations: [Conversation!]!
  guilds: [Guild!]!
  me: User!
}

type Role {
  color: Int!
  name: String!
  permissions: [Permission!]!
}

enum Status {
  DO_NOT_DISTURB
  IDLE
  OFFLINE
  ONLINE
}

type SubscriptionRoot {
  messages: Message!
}

type TextChannel implements TextableChannel {
  guild: ID!
  identifier: ID!
  name: String!
  talk: Conversation!
}

interface TextableChannel {
  identifier: ID!
  name: String!
}

enum Theme {
  DARK
  LIGHT
}

scalar Upload

type User {
  badges: [Badge!]!
  displayName: String!
  friends: [User!]!
  id: ID!
  status: Status!
  tag: String!
  tagDiscriminator: [Int!]!
  tagName: String!
  theme: Theme!
}
