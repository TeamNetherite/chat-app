schema {
  query: QueryRoot
  mutation: MutationRoot
  subscription: SubscriptionRoot
}

enum Badge {
  ADMIN
  MODERATOR
}

type Conversation {
  author: User!
  getAllMessages: [Message!]!
  messages(after: String, before: String, first: Int, last: Int): NodediConnection!
  recipient: MessageRecipient!
}

type Message {
  author: User!
  content: String!
  createdAt: String!
  id: ID!
  recipient: MessageRecipient!
}

input MessageInit {
  content: String!
  recipient: ID!
}

type MessageRecipient {
  asUser: User
}

type MutationRoot {
  addFriend(other: String!): User
  sendMessage(message: MessageInit!): Message!
  setStatus(status: Status!): User!
}

type Nodedi {
  author: User!
  content: String!
  createdAt: String!
  cursor: Int!
  id: ID!
  recipient: MessageRecipient!
}

type NodediConnection {
  """A list of edges."""
  edges: [NodediEdge!]!

  """A list of nodes."""
  nodes: [Nodedi!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type NodediEdge {
  """A cursor for use in pagination"""
  cursor: String!

  """The item at the end of the edge"""
  node: Nodedi!
}

"""Information about pagination in a connection"""
type PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

type QueryRoot {
  conversationDirect(recipient: ID!): Conversation!
  conversations: [Conversation!]!
  me: User!
}

enum Status {
  DO_NOT_DISTURB
  IDLE
  OFFLINE
  ONLINE
}

type SubscriptionRoot {
  messages: Message!
}

type User {
  badges: [Badge!]!
  displayName: String!
  friends: [User!]!
  id: ID!
  status: Status!
  tag: String!
  tagDiscriminator: [Int!]!
  tagName: String!
}
